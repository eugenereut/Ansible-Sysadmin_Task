server {
        listen [::]:443 ssl http2 ipv6only=on;
        listen 443 ssl  http2 default_server;

        # include snippets/snakeoil.conf;
         # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/{{ servers_vars.frontend_hostname }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ servers_vars.frontend_hostname }}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        server_name {{ servers_vars.frontend_hostname }};
        root {{ drupal_db.drupal_docroot }};

        access_log /var/log/nginx/access.log;
        error_log  /var/log/nginx/error.log info;

        index index.php;

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        # This matters if you use drush
        location = /backup {
                deny all;
        }

        # Very rarely should these ever be accessed outside of your lan
        location ~* \.(txt|log)$ {
                allow 127.0.0.1;
                deny all;
        }

        location ~ \..*/.*\.php {
                return 403;
        }

        location / {
                # This is cool because no php is touched for static content
                try_files $uri $uri/ @rewrite;
                expires max;
        }

        location @rewrite {
                # Some modules enforce no slash (/) at the end of the URL
                # Else this rewrite block wouldn&#39;t be needed (GlobalRedirect)
                rewrite ^/(.*)$ /index.php?q=$1;
        }

        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
                deny all;
        }
}

# remove 'www'
# server {
#    listen 443 ssl;
#    server_name www.domain.com;
#    return 301 $scheme://domain.com$request_uri;
# }

server {
        listen 80;
        listen [::]:80;
        #
        server_name {{ servers_vars.frontend_hostname }};
        return 301 https://{{ servers_vars.frontend_hostname }}$request_uri;
}
